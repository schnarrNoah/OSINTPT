import os
import subprocess
import time

def start_metasploit_vuln_lookup(service: str, version: str, timeout: int = 60):
    """
    Starts Metasploit in a subprocess and searches for vulnerabilities for a given service and version.
    Adds a timeout to avoid blocking the process indefinitely.
    """
    try:
        print("Starting Metasploit console...")

        # Command to run in Metasploit
        msf_command = f"search name:{service} type:exploit platform:all app:{service} version:{version}"

        # Print the command to be executed for debugging
        print(f"Executing Metasploit command: {msf_command}")

        # Copy environment variables, including any necessary configurations
        env = os.environ.copy()

        # Start Metasploit subprocess with debug flag (-d)
        process = subprocess.Popen(
            ['msfconsole', '-q', '-d', '-x', msf_command],  # `-d` for debug mode, `-x` to pass a command
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env=env  # Pass environment variables
        )

        # Wait for the process to finish with a timeout
        start_time = time.time()
        while time.time() - start_time < timeout:
            stdout, stderr = process.communicate(timeout=timeout)

            if stdout:
                print("\n[Metasploit Search Results]")
                print(stdout)
                break

            if stderr:
                print("\n[Metasploit Errors]")
                print(stderr)
                break

        if process.poll() is None:
            print("Process timed out, terminating.")
            process.terminate()

    except FileNotFoundError:
        print("Metasploit is not installed or not in the PATH.")
    except subprocess.TimeoutExpired:
        print("The Metasploit process timed out.")
    except Exception as e:
        print(f"An error occurred: {e}")
